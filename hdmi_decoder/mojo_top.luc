module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    
    
    
    input hdmi2_tmds [4],   // HDMI In
    input hdmi2_tmdsb [4],
    inout hdmi2_sda,        // EDID Interface
    input hdmi2_scl
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // connect up the edid rom using a clock we know will alway be running
    edid_rom edid (.rst(rst), .sda(hdmi2_sda), .scl(hdmi2_scl));
    
    avr_interface avr(.rst(rst));
     
  }
  
  
  hdmi_decoder hdmi_in (.rst(0));
  
  // use the pixel clock for the color data
  .clk(hdmi_in.pclk) {
    dff red[8];
    dff green[8];
    dff blue[8];
    
    dff activeTest; 
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf; // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
 
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    // connect HDMI input
    hdmi_in.tmds = hdmi2_tmds;
    hdmi_in.tmdsb = hdmi2_tmdsb;
    
    // connect HDMI output
    //hdmi1_tmds = hdmi.tmds_out;
    //hdmi1_tmdsb = hdmi.tmdsb_out;
     
    // save colors
    red.d = hdmi_in.red;
    green.d = hdmi_in.green;
    blue.d = hdmi_in.blue;
    
    
    avr.new_tx_data = 0;
    avr.tx_data = 0;
        
    led = red.q;
        
    activeTest.d = hdmi_in.active;

    if(activeTest.q == 1)
    {
      if(!avr.tx_busy)
      {
        if(hdmi_in.x[5] == 0)// && hdmi_in.y[5] == 1)
        {
          avr.new_tx_data = 1;
          avr.tx_data = red.q;
          led[0] = 0;
          avr.tx_data = red.q;
        }
      }
    }else
    {
      led[0] = 1;
    }
    
  }
}