// sets display area to x,y   
// x from 40 to 448
// y from 30 to 250

//draggin the mouse over the above acstive screen area the 2nd LED (led[1]) to turn ON

//had to edit HDMI_decoder as it didn't work... imported dvi_decoder directly... not sure 

//05/08/18 - took out 100mhz
//         - top sends x/y to panel #1 module. panel #1 counts pixels (680) and serial prints

//05/09/18 - logs rgb values to simple ram... writes to panel... 
//05/10/18 - logs first row across entire screen...and prints it to LED panel. ignoring small panel layout.
//05/13/18 - one frame working ... thanks to the gods...
//05/15/18 - abandoned work from yesterday... starting from pdmi_in_piel_area5
//05/16/18 - writes leds correctly
//05/16/18 - fixed vsync issue on top page





module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    
    
    
    input hdmi2_tmds [4],   // HDMI In
    input hdmi2_tmdsb [4],
    inout hdmi2_sda,        // EDID Interface
    input hdmi2_scl,
    
    
    output apa102_data,
    output apa102_sck
    
    
  ) {
  
  sig rst;  // reset signal
  
  //start reading pixels at location 40,30 (x,y) on HDMI screen 1270 x 800
  const X_START = 40; //
  const Y_START = 30; //

  panelOneTrArray panelOneTrArray;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // connect up the edid rom using a clock we know will alway be running
    edid_rom edid (.rst(rst), .sda(hdmi2_sda), .scl(hdmi2_scl));
    
    avr_interface avr(.rst(rst)); 
    
    dff gameCounter[26];
    dff blinkFlag[2];
  }
  
  dvi_decoder hdmi_in (.rst(rst));
  
  .clk(hdmi_in.pclk) {
    dff x_ctr[11];
    dff y_ctr[11];
    
    dff red[8];
    dff green[8];
    dff blue[8];
    
    dff vFlag[2];
    
    dff ledPanelActiveFlag[6]; //33 panels per mojo
    
    panel_1 panel_1(.rst(rst));
    spi_master2 spi_out(.rst(rst));
    
  }
  
  always {
    reset_cond.in = ~rst_n;    // input raw inverted reset signal
    rst = reset_cond.out;      // conditioned reset
 
    //spi_miso = bz;             // not using SPI
    //spi_channel = bzzzz;       // not using flags
    //avr_rx = bz;               // not using serial port
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf; // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
 
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    avr.new_tx_data = 0;
    avr.tx_data = 0;
    
    avr.tx_data = panel_1.transmitByte;
    avr.new_tx_data = panel_1.newDataFlag;

    panel_1.red = red.q;
    panel_1.green = green.q;
    panel_1.blue = blue.q;

    panel_1.tx_busy = avr.tx_busy;
    panel_1.ledPanelActiveFlag = ledPanelActiveFlag.q;
    panel_1.ledPanelStartFlag = hdmi_in.vsync;   //flag to start reading frame
    
    panelOneTrArray.address = panel_1.rowPixelAddress;
    panel_1.rowStartPixel = panelOneTrArray.rowPixelNumber; 
    
    
    // connect HDMI input
    hdmi_in.tmds = hdmi2_tmds;
    hdmi_in.tmdsb = hdmi2_tmdsb;
    
    
    spi_out.data_in = panel_1.ledByteOut;
    spi_out.start = panel_1.newSpiData; 
    panel_1.spiBusySignal = spi_out.busy;   
    
    spi_out.miso = 1b0;
    apa102_data = spi_out.mosi;
    apa102_sck = spi_out.sck;

    
     
    // save colors
    red.d = hdmi_in.red;
    green.d = hdmi_in.green;
    blue.d = hdmi_in.blue;
    
    gameCounter.d = gameCounter.q + 1;
    
    led[0] = gameCounter.q[25];  // this is a heart beat counter ~ 1 per second  
    led[2] = panel_1.ledOut;    //flag from other module
    led[7:3] = red.q;           //has a default black screen... turns on pixels momentarily if there is red
        
    ledPanelActiveFlag.d = 0;
    
    if (hdmi_in.de) {
      x_ctr.d = x_ctr.q + 1;
    }
    
    
    if(hdmi_in.hsync)
    {
      y_ctr.d = y_ctr.q + 1;
      x_ctr.d = 0;
      vFlag.d = 0;
    }
    
    if (hdmi_in.vsync) {
      x_ctr.d = 0;
      y_ctr.d = 0;
      vFlag.d = 0;
    }
    
    if(x_ctr.q >= X_START && y_ctr.q >= Y_START && hdmi_in.de) // active flag for Panel #1 module
    {
      ledPanelActiveFlag.d[0] = 1;  
    }
    else{
      
      ledPanelActiveFlag.d[0] = 0;
    }  
    
    
        
   
     if(x_ctr.q >= X_START && x_ctr.q < 74 && y_ctr.q >= Y_START && y_ctr.q < 50 && hdmi_in.de && blinkFlag.q == 0) //this is a sample area for testing
    {
      if(red.q > 30)
      {
      if(gameCounter.q[25] == 1)
        {
          if(!&blinkFlag.q)
          {
            blinkFlag.d = blinkFlag.q + 1;
          }
          led[1] = 1;
        }else{
          led[1] = 0;
        }
      }
    }
    if(gameCounter.q[25] == 0)  //this is just a flag for testing
    {
      blinkFlag.d = 0;
      led[1] = 0;
    }  
    
        


 
    
  
  
  }
}

  
